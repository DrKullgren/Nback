import tkinter as tk
from tkinter import messagebox
import random
import string
import time

class NBackTest:
    def __init__(self, master, n=1):
        self.master = master
        self.n = n
        self.sequence = []
        self.current_index = 0
        self.correct_responses = 0
        self.incorrect_responses = 0
        self.start_time = time.time()

        self.label = tk.Label(master, text="", font=("Helvetica", 32))
        self.label.pack(pady=20)

        self.button_yes = tk.Button(master, text="Ja", command=self.yes, font=("Helvetica", 20), width=10)
        self.button_yes.pack(side="left", padx=20)

        self.button_no = tk.Button(master, text="Nej", command=self.no, font=("Helvetica", 20), width=10)
        self.button_no.pack(side="right", padx=20)

        self.next_letter()

    def next_letter(self):
        if self.current_index < self.n:
            letter = random.choice(string.ascii_uppercase)
            self.sequence.append(letter)
        else:
            letter = random.choice(string.ascii_uppercase)
            self.sequence.append(letter)
            self.label.config(text=letter)
        
        self.master.after(1000, self.show_letter)

    def show_letter(self):
        if self.current_index >= self.n:
            self.label.config(text=self.sequence[self.current_index])
        self.current_index += 1
        self.master.after(3000, self.next_letter)

    def yes(self):
        if self.current_index > self.n:
            if self.sequence[self.current_index - 1] == self.sequence[self.current_index - 1 - self.n]:
                self.correct_responses += 1
            else:
                self.incorrect_responses += 1
        self.next_letter()

    def no(self):
        if self.current_index > self.n:
            if self.sequence[self.current_index - 1] != self.sequence[self.current_index - 1 - self.n]:
                self.correct_responses += 1
            else:
                self.incorrect_responses += 1
        self.next_letter()

    def end_test(self):
        elapsed_time = time.time() - self.start_time
        accuracy = self.correct_responses / (self.correct_responses + self.incorrect_responses) * 100
        messagebox.showinfo("Test Resultat", f"Rätta svar: {self.correct_responses}\nFelaktiga svar: {self.incorrect_responses}\nNoggrannhet: {accuracy:.2f}%\nTid: {elapsed_time:.2f} sekunder")
        self.master.quit()

if __name__ == "__main__":
    root = tk.Tk()
    root.title("N-back Test")
    app = NBackTest(root, n=2)  # Ändra n-värdet för att testa olika nivåer
    root.protocol("WM_DELETE_WINDOW", app.end_test)
    root.mainloop()
